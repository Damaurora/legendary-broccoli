// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤–∏—Ç –ø—Ä–æ–µ–∫—Ç –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render.com
// –∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è

const fs = require('fs');
const path = require('path');

console.log('üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è –¥–ª—è Render.com...');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é public –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync('public')) {
  fs.mkdirSync('public');
}

// –ü—Ä–æ—Å—Ç–æ–π package.json –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞
const packageJson = {
  "name": "damask-shop-emergency",
  "version": "1.0.0", 
  "private": true,
  "scripts": {
    "start": "node server.cjs"
  },
  "engines": {
    "node": ">=18.0.0"
  }
};

// –°–µ—Ä–≤–µ—Ä –Ω–∞ —á–∏—Å—Ç–æ–º Node.js –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
const serverCode = `// –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
// –î–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è –Ω–∞ Render.com

const http = require('http');
const fs = require('fs');
const path = require('path');

const PORT = process.env.PORT || 3000;

// –¢–∏–ø MIME –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
const getMimeType = (extension) => {
  const mimeTypes = {
    '.html': 'text/html',
    '.css': 'text/css',
    '.js': 'text/javascript',
    '.json': 'application/json',
    '.png': 'image/png',
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml',
    '.ico': 'image/x-icon',
  };
  return mimeTypes[extension] || 'text/plain';
};

const server = http.createServer((req, res) => {
  console.log(\`\${new Date().toISOString()} \${req.method} \${req.url}\`);
  
  // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ—Ä–µ–Ω—å, –æ—Ç–¥–∞–µ–º index.html
  let filePath = './public' + (req.url === '/' ? '/index.html' : req.url);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
  fs.access(filePath, fs.constants.F_OK, (err) => {
    if (err) {
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–¥–∞–µ–º index.html (–¥–ª—è SPA –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏)
      filePath = './public/index.html';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    const extname = path.extname(filePath);
    const contentType = getMimeType(extname);
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    fs.readFile(filePath, (err, content) => {
      if (err) {
        res.writeHead(500);
        res.end('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + err.code);
      } else {
        res.writeHead(200, { 'Content-Type': contentType });
        res.end(content, 'utf-8');
      }
    });
  });
});

server.listen(PORT, () => {
  console.log(\`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É \${PORT}\`);
  console.log(\`http://localhost:\${PORT}\`);
});`;

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π index.html
const html = `<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Damask Shop</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      line-height: 1.6;
      color: #333;
    }
    .container {
      background-color: #f5f5f5;
      border-radius: 8px;
      padding: 30px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      margin-top: 50px;
    }
    h1 {
      color: #e63900;
      text-align: center;
      margin-bottom: 30px;
    }
    h2 {
      margin-top: 30px;
      color: #333;
      border-bottom: 1px solid #ddd;
      padding-bottom: 10px;
    }
    .maintenance {
      font-weight: bold;
      color: #e63900;
      text-align: center;
      font-size: 1.2em;
      margin-bottom: 30px;
    }
    a {
      color: #e63900;
      text-decoration: none;
    }
    a:hover {
      text-decoration: underline;
    }
    .store-list {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-top: 20px;
    }
    .store-card {
      flex: 1 1 300px;
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 15px;
      background-color: white;
    }
    .store-name {
      font-weight: bold;
      margin-bottom: 5px;
    }
    .contact-info {
      margin-top: 30px;
      background-color: white;
      padding: 15px;
      border-radius: 8px;
      border: 1px solid #ddd;
    }
    .footer {
      margin-top: 40px;
      text-align: center;
      color: #777;
      font-size: 0.9em;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>DAMASK SHOP</h1>
    <p class="maintenance">‚ö†Ô∏è –°–∞–π—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è ‚ö†Ô∏è</p>
    
    <h2>–ù–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã</h2>
    <p>–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã:</p>
    
    <div class="store-list">
      <div class="store-card">
        <div class="store-name">—É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, 100</div>
        <div>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 10:00 - 20:00</div>
        <div>–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX</div>
      </div>
      
      <div class="store-card">
        <div class="store-name">—É–ª. –ü–æ–±–µ–¥—ã, 78</div>
        <div>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 10:00 - 20:00</div>
        <div>–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX</div>
      </div>
    </div>
    
    <h2>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
    <div class="contact-info">
      <p>–û–±—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX</p>
      <p>Email: info@damask-shop.ru</p>
      <p>Telegram: @damask_shop</p>
    </div>
    
    <p class="footer">–ú—ã —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω–µ–º—Å—è –æ–Ω–ª–∞–π–Ω —Å –Ω–æ–≤—ã–º —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å–∞–π—Ç–æ–º!</p>
  </div>
</body>
</html>`;

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
fs.writeFileSync('public/index.html', html);
fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
fs.writeFileSync('server.cjs', serverCode);

console.log('‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –¥–µ–ø–ª–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω!');
console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Render.com:');
console.log('1. Build Command: npm install (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º)');
console.log('2. Start Command: npm start');

// –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å-—Ñ–∞–π–ª–µ –¥–ª—è Render
console.log('\nüîç –°–æ–∑–¥–∞–Ω —Å—Ç–∞—Ç—É—Å-—Ñ–∞–π–ª render-build-completed.txt –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–π —Å–±–æ—Ä–∫–∏');
fs.writeFileSync('render-build-completed.txt', '–°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ' + new Date().toISOString());